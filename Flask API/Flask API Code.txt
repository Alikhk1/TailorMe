!pip install flask tensorflow numpy opencv-python
!pip install flask-ngrok
!pip install pyngrok

from google.colab import drive
drive.mount('/content/drive')

!ngrok authtoken [INSERT YOUR AUTH TOKEN HERE]

from flask import Flask, request, jsonify
from collections import OrderedDict
import tensorflow.lite as tflite
import numpy as np
import cv2
import joblib
import subprocess
import time
import requests
import os
import signal

# Initialize Flask app
app = Flask(__name__)

# Load the TFLite model
interpreter = tflite.Interpreter(model_path="/content/drive/MyDrive/resnet_model.tflite")
interpreter.allocate_tensors()

# Get input and output tensors
input_details = interpreter.get_input_details()
output_details = interpreter.get_output_details()

# Load the saved scaler
scaler = joblib.load("/content/drive/MyDrive/resnet_scaler.pkl")

# Ordered measurement names
measurement_names = [
    "Arm Length", "Shoulder Width", "Chest", "Waist",
    "Hip", "Neck", "Shalwar Length", "Qameez Length"
]

# Define size ranges
size_ranges = {
    "Small": {"Chest": (32, 36), "Waist": (28, 32), "Hip": (32, 36), "Shoulder Width": (14, 16), "Arm Length": (22, 24), "Neck": (14, 15)},
    "Medium": {"Chest": (37, 40), "Waist": (33, 36), "Hip": (37, 40), "Shoulder Width": (16.5, 18), "Arm Length": (24.5, 26), "Neck": (15.5, 16.5)},
    "Large": {"Chest": (41, 44), "Waist": (37, 40), "Hip": (41, 44), "Shoulder Width": (18.5, 20), "Arm Length": (26.5, 28), "Neck": (17, 18)}
}

def determine_size(measurements):
    """Determines clothing size (S, M, L) based on first 6 predicted measurements."""
    size_counts = {"Small": 0, "Medium": 0, "Large": 0}

    for i in range(6):  # Use only first 6 measurements relevant for size
        value = measurements[i]
        for size, ranges in size_ranges.items():
            min_val, max_val = ranges.get(measurement_names[i], (None, None))
            if min_val is not None and min_val <= value <= max_val:
                size_counts[size] += 1

    if max(size_counts.values()) == 0:
        return "Unknown"
    return max(size_counts, key=size_counts.get)

@app.route('/predict', methods=['POST'])
def predict():
    if "image" not in request.files:
        return jsonify({"error": "No image provided"}), 400

    if interpreter is None:
        return jsonify({"error": "Model not loaded properly."}), 500

    if scaler is None:
        return jsonify({"error": "Scaler not loaded properly."}), 500

    image = request.files["image"]
    image_bytes = image.read()

    try:
        # Preprocess image
        img = cv2.imdecode(np.frombuffer(image_bytes, np.uint8), cv2.IMREAD_COLOR)
        img = cv2.resize(img, (128, 128))  # Match MobileNet input size
        img = img / 255.0  # Normalize
        img = np.expand_dims(img, axis=0).astype(np.float32)

        # Run inference
        interpreter.set_tensor(input_details[0]['index'], img)
        interpreter.invoke()
        predictions = interpreter.get_tensor(output_details[0]['index'])[0]

        # Inverse transform to actual measurements
        actual_measurements = scaler.inverse_transform([predictions])[0]

        # Prepare ordered response
        response = OrderedDict()
        for i, name in enumerate(measurement_names):
            response[name] = f"{actual_measurements[i]:.2f}"
        response["Recommended Size"] = determine_size(actual_measurements)

        return jsonify(response)

    except Exception as e:
        return jsonify({"error": str(e)}), 500


def start_ngrok():
    # Kill previous ngrok processes if any
    try:
        pids = subprocess.check_output(["pgrep", "ngrok"]).decode().strip().split('\n')
        for pid in pids:
            os.kill(int(pid), signal.SIGTERM)
        time.sleep(2)
    except Exception:
        pass

    logfile = "ngrok.log"
    command = f"nohup ngrok http 5000 --domain shrew-neat-goldfish.ngrok-free.app > {logfile} 2>&1 &"
    os.system(command)

    max_attempts = 15
    for _ in range(max_attempts):
        try:
            tunnel_info = requests.get("http://localhost:4040/api/tunnels").json()
            public_url = tunnel_info['tunnels'][0]['public_url']
            print(f"üåç Public URL: {public_url}")
            return public_url
        except Exception:
            time.sleep(1)

    print("‚ùå Could not get ngrok URL after retries. Last 10 lines of ngrok.log:")
    if os.path.exists(logfile):
        with open(logfile, "r") as f:
            lines = f.readlines()
            print("".join(lines[-10:]))
    else:
        print("Log file not found.")

    return None

if __name__ == '__main__':
    start_ngrok()
    app.run(host='0.0.0.0', port=5000)
